import Head from "next/head";
import { TOKEN_ADDRESS, TOKEN_ABI } from "../constants/constants";
import { useState, useEffect } from "react";
import Web3Modal from "web3modal";
import { ethers } from "ethers";

export default function Home() {
  const [loading, setLoading] = useState(true);
  const [balance, setBalance] = useState(0);
  const [paymentInfo, setPaymentInfo] = useState({ amount: "", address: "0x" });

  const getProviderOrSigner = async (isNeedSigner) => {
    const web3modal = new Web3Modal();

    const instance = await web3modal.connect();
    const web3Provider = new ethers.providers.Web3Provider(instance);
    const { chainId } = await web3Provider.getNetwork();

    if (chainId !== 80001) {
      window.alert("Change the network to mumbai");
      throw new Error("Change network to mumbai");
    }
    const signer = web3Provider.getSigner();
    if (!isNeedSigner) {
      return web3Provider;
    }
    return signer;
  };

  const loadBalance = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const tokenContract = new ethers.Contract(
        TOKEN_ADDRESS,
        TOKEN_ABI,
        signer
      );
      const currentBalance = await tokenContract.balanceOf(signer.getAddress());
      const formattedBalance = ethers.utils.formatEther(currentBalance);
      setBalance(formattedBalance);
      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  const sendPayment = async (e) => {
    try {
      e.preventDefault();
      const { address, amount } = paymentInfo;
      if (!address || !amount) {
        console.log(address, amount);
        return;
      }
      const signer = await getProviderOrSigner(true);
      const tokenContract = new ethers.Contract(
        TOKEN_ADDRESS,
        TOKEN_ABI,
        signer
      );
      let currentBalance = await tokenContract.balanceOf(signer.getAddress());
      let formattedBalance = ethers.utils.formatEther(currentBalance);
      if (currentBalance < amount) {
        return "You don't have enough balance";
      }
      const parseAmount = ethers.utils.parseUnits(amount, "ether");
      const txn = await tokenContract.transfer(address, parseAmount);
      await txn.wait();
      loadBalance();
      currentBalance = await tokenContract.balanceOf(signer.getAddress());
      formattedBalance = ethers.utils.formatEther(currentBalance);
      setBalance(formattedBalance);
    } catch (error) {
      console.log(error);
    }
  };
  useEffect(() => {
    loadBalance();
  }, []);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        Your Balance: {balance} PAY
        <form action="">
          <input
            type="text"
            placeholder="Amount To Transfer"
            onChange={(e) =>
              setPaymentInfo({ ...paymentInfo, amount: e.target.value })
            }
          />
          <br />
          <input
            type="text"
            placeholder="Receiver's Address"
            onChange={(e) =>
              setPaymentInfo({ ...paymentInfo, address: e.target.value })
            }
          />
          <br />
          <button type="submit" onClick={(e) => sendPayment(e)}>
            SEND
          </button>
        </form>
      </main>
    </div>
  );
}
